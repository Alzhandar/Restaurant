version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: restaurant_db_prod
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: restaurant_redis_prod
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Web Application (Production with Gunicorn)
  web:
    build: .
    container_name: restaurant_web_prod
    command: gunicorn core.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 2
    volumes:
      - static_volume_prod:/app/staticfiles
      - media_volume_prod:/app/media
    expose:
      - 8000
    env_file:
      - .env
    environment:
      - DEBUG=False
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: restaurant_nginx_prod
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume_prod:/app/staticfiles:ro
      - media_volume_prod:/app/media:ro
    ports:
      - "80:80"
    depends_on:
      - web
    restart: always

  # Celery Worker
  celery_worker:
    build: .
    container_name: restaurant_celery_worker_prod
    command: celery -A core worker --loglevel=info --concurrency=4
    env_file:
      - .env
    depends_on:
      - db
      - redis
      - web
    restart: always

  # Celery Beat (Scheduler)
  celery_beat:
    build: .
    container_name: restaurant_celery_beat_prod
    command: celery -A core beat --loglevel=info
    env_file:
      - .env
    depends_on:
      - db
      - redis
      - web
    restart: always

volumes:
  postgres_data_prod:
  static_volume_prod:
  media_volume_prod:
